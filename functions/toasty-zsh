function toasty-zsh {
    # we are now POSIX compatible
    [ -n "$ZSH_VERSION" ] && emulate -L sh # so we emulate POSIX sh
    # zsh emulation is always sticky in-func, so we need to wrap sourcing
    function load {
        [ -n "$ZSH_VERSION" ] && emulate zsh -c ". $1" || . $1
    }
    compile=
    localcompile=
    plugin=0
    plugins=
    src=
    update=

    while getopts clp:su flag
    do
        case $flag in
        c)  compile=1;;
        l)  localcompile=1;;
        p)  plugin="$(( plugin + 1 ))"
            [ -z "$plugins" ] && plugins="$OPTARG" || plugins="$plugins $OPTARG";;
        s)  src=1;;
        u)  update=1;;
        ?)  printf 'Usage: %s: [-u] [-s] [-p plugin]\n' $0
            return 2;;
        esac
    done

    if [ ! -z "$compile" ]; then
        dirs="$zshd/functions"
        [ ! -z "$localcompile" ] && dirs="$dirs $zd/functions"
        function {
            for dir in $@; do
                for f in $dir/*; do
                    # don't compile things that are already compiled
                    [ ! "${f%.zwc}" = "$f" ] && continue
                    zcompile "$f.zwc" "$f"
                done
            done
        } "$dirs"
    fi

    if [ ! -z "$update" ]; then
        git -C "$zshd" pull
    fi

    if [ ! -z "$src" ]; then
        load "$zrc"
    fi

    if [ "$plugin" -gt 0 ]; then
        for plug in $plugins; do
            # prioritize $zd
            # we no longer complete .plugin.zsh bits in non-dirs
            plugpath="$zd/plugins/$plug
                $zd/plugins/$plug/$plug
                $zd/plugins/$plug/${plug}.zsh
                $zd/plugins/$plug/${plug}.plugin.zsh
                $zshd/plugins/$plug
                $zshd/plugins/$plug/$plug
                $zshd/plugins/$plug/${plug}.zsh
                $zshd/plugins/$plug/${plug}.plugin.zsh"
            foundplug=
            for p in $plugpath; do
                # we're only interested in readable regular files
                ( [ -f "$p" ] && [ -r "$p" ] ) || continue
                load "$p"
                foundplug=1
                break
            done
            if [ -z "$foundplug" ]; then
                printf 'Plugin %s not found!' "$plug"
                return 1
            fi
        done
    fi
    unset -f load
}

# vim: ft=sh
